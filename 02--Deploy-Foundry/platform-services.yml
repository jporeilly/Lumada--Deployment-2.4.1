# Deploy OpenEBS & Platform Services
- name: Deploy OpenEBS & Platform Services
  hosts: "{{ groups['installer'][0] }}"
  become: false
  gather_facts: true
  vars:
    installer_home: /home/installer/Packages
    foundry_home: /home/installer/Packages/Foundry-Control-Plane-2.4.1/Foundry
    foundry_root: Foundry-Control-Plane-2.4.1
    metrics_home: /home/installer/Packages/metrics-addon-1.0.0
    metrics_root: metrics-addon-1.0.0
    logs_dir: /home/installer/Packages/Foundry-Control-Plane-2.4.1/Foundry/Logs

    ansible_python_interpreter: /usr/bin/python3
    
  tasks:
    - name: Ping Nodes
      ping:
      tags: 
       - info

    # Update Packages
    - name: Update all packages
      apt:
       name: '*'
      tags: 
       - info
       - install 

    # Check Storage class
    - name: Check storage class
      shell: kubectl get sc -A | grep "(default)"
      register: sc
      ignore_errors: true   

    # Install OpenEBS    
    - name: Install openebs default storageclass (if needed)
      shell: "{{ item }}"
      with_items:
        - kubectl create ns openebs
        - helm repo add openebs https://openebs.github.io/charts
        - helm repo update
        - helm install --namespace openebs openebs openebs/openebs
      when: "'default' not in sc.stdout"

    # Set OpenEBS as default Storage Class
    - name: Set openEBs as default storageclass
      shell: |
        kubectl patch storageclass openebs-hostpath -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
      when: "'default' not in sc.stdout"

    # Check OpenEBS is installed
    - name: Check Openebs storageclass
      shell: kubectl get sc | grep default
      register: openebs
      failed_when: "'openebs-hostpath' not in openebs.stdout"
      when: "'default' not in sc.stdout"         

    # Unarchive Foundry-Control-Plane-2.4.1.tgz
    - name: Unarchive {{ foundry_root }}.tgz
      unarchive:
        src: "{{ installer_home }}/{{ foundry_root }}.tgz"
        dest: "{{ foundry_home }}"
      tags: 
       - unpack 

    # Checks for the Metrics-addon-1.0.0. directory
    - name: Check for 'Metrics 1.0.0' directory
      stat:
        path: "{{ metrics_home }}"
      register: metrics
      tags: 
       - info 

    - debug: 
        msg: "metrics directory exists: {{ metrics.stat.exists }}"
      tags: 
       - info     

    # Unarchive Metrics-addon-1.0.0.
    - name: Unpack {{ metrics_root }}
      unarchive: 
        src: "{{ installer_home }}/{{ metrics_root }}.tgz"
        dest: "{{ installer_home }}"
      tags: 
       - unpack 
 
    # Foundry requires istio and cert-manager be installed
    - name: Install Cluster Services
      shell: 
        chdir: "{{ foundry_home }}"
        cmd: ./bin/install-cluster-services.sh -r {{ registry_domain }}:{{ registry_port }} -D true 2>&1 | tee -a {{ logs_dir }}/install-cluster-services.log
      async: 2500
      poll: 30
      register: ret
      failed_when: "ret.rc > 0 or 'no such file' in ret.stdout"
      tags: 
       - install_cs

    # Install Hitachi Foundry CRDs
    - name: Run Custom Resource Definitions Script
      shell: 
        chdir: "{{ foundry_home }}"
        cmd: ./bin/apply-crds.sh -e -r {{ registry_domain }}:{{ registry_port }} --insecure -D true 2>&1 | tee -a {{ logs_dir }}/apply-crds.log
      async: 2500
      poll: 30
      register: ret
      failed_when: "ret.rc > 0 or 'no such file' in ret.stdout"
      tags: 
       - install
       - install_cs  